# -*- coding: utf-8 -*-
"""Image_Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lHDbo5QsH6NX_nq8NZcz51l2WylgB0ra
"""

import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
import numpy as np
import torchvision
from torchvision import datasets, models, transforms
import matplotlib.pyplot as plt
import time
import os
import copy
import argparse

device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
class_names = {0:'buildings', 1:'forest', 2:'glacier', 3:'mountain', 4:'sea', 5:'street'}

def set_parameter_requires_grad(model, feature_extracting):
    if feature_extracting:
        for param in model.parameters():
            param.requires_grad = False

class ClassifierNet(nn.Module):
  def __init__(self, num_classes):
      super(ClassifierNet, self).__init__()
      self.conv1 = nn.Conv2d(3, 64, (3,3), padding=1)
      self.bn1 = nn.BatchNorm2d(64)
      self.relu1 = nn.ReLU(inplace=True)
      self.amp1 = nn.AvgPool2d(3, stride=1)
      self.conv2 = nn.Conv2d(64, 64, (3,3), padding=1)
      self.bn2 = nn.BatchNorm2d(64)
      self.relu2 = nn.ReLU(inplace=True)
      self.amp2 = nn.AvgPool2d(3, stride=1)
      self.conv3 = nn.Conv2d(64, 256, (3,3), padding=1)
      self.bn3 = nn.BatchNorm2d(256)
      self.relu3 = nn.ReLU(inplace=True)
      self.amp3 = nn.AdaptiveMaxPool2d((1,1))
      self.ll = nn.Linear(256, 6)

  def forward(self, x):
      x = self.conv1(x)
      x = self.bn1(x)
      x = self.relu1(x)
      x = self.amp1(x)
      x = self.conv2(x)
      x = self.bn2(x)
      x = self.relu2(x)
      x = self.amp2(x)
      x = self.conv3(x)
      x = self.bn3(x)
      x = self.relu3(x)
      x = self.amp3(x)
      x = self.ll(torch.flatten(x, 1))
      return x

def initialize_model(model_name, num_classes, feature_extract, use_pretrained=True):
    # Initialize these variables which will be set in this if statement. Each of these
    #   variables is model specific.
    model_ft = None
    input_size = 0

    if model_name == "resnet":
        """ Resnet18
        """
        model_ft = models.resnet18(pretrained=use_pretrained)
        set_parameter_requires_grad(model_ft, feature_extract)
        num_ftrs = model_ft.fc.in_features
        model_ft.fc = nn.Linear(num_ftrs, num_classes)
        input_size = 224

    return model_ft, input_size

def imshow(inp, title=None):
    """Imshow for Tensor."""
    inp = inp.numpy().transpose((1, 2, 0))
    mean = np.array([0.485, 0.456, 0.406])
    std = np.array([0.229, 0.224, 0.225])
    inp = std * inp + mean
    inp = np.clip(inp, 0, 1)
    plt.imshow(inp)
    if title is not None:
        plt.title(title)
    plt.pause(0.001)  # pause a bit so that plots are updated

def train_model(model, dataloaders, criterion, optimizer, num_epochs, is_inception=False):
    since = time.time()

    val_acc_history = []

    best_model_wts = copy.deepcopy(model.state_dict())
    best_acc = 0.0

    for epoch in range(num_epochs):
        print('Epoch {}/{}'.format(epoch, num_epochs - 1))
        print('-' * 10)

        # Each epoch has a training and validation phase
        for phase in ['train', 'val']:
            if phase == 'train':
                model.train()  # Set model to training mode
            else:
                model.eval()   # Set model to evaluate mode

            running_loss = 0.0
            running_corrects = 0

            # Iterate over data.
            for inputs, labels in dataloaders[phase]:
                inputs = inputs.to(device)
                labels = labels.to(device)

                # zero the parameter gradients
                optimizer.zero_grad()

                # forward
                # track history if only in train
                with torch.set_grad_enabled(phase == 'train'):
                    # Get model outputs and calculate loss
                    # Special case for inception because in training it has an auxiliary output. In train
                    #   mode we calculate the loss by summing the final output and the auxiliary output
                    #   but in testing we only consider the final output.
                    if is_inception and phase == 'train':
                        # From https://discuss.pytorch.org/t/how-to-optimize-inception-model-with-auxiliary-classifiers/7958
                        outputs, aux_outputs = model(inputs)
                        loss1 = criterion(outputs, labels)
                        loss2 = criterion(aux_outputs, labels)
                        loss = loss1 + 0.4*loss2
                    else:
                        outputs = model(inputs)
                        loss = criterion(outputs, labels)

                    _, preds = torch.max(outputs, 1)

                    # backward + optimize only if in training phase
                    if phase == 'train':
                        loss.backward()
                        optimizer.step()

                # statistics
                running_loss += loss.item() * inputs.size(0)
                running_corrects += torch.sum(preds == labels.data)

            epoch_loss = running_loss / len(dataloaders[phase].dataset)
            epoch_acc = running_corrects.double() / len(dataloaders[phase].dataset)

            print('{} Loss: {:.4f} Acc: {:.4f}'.format(phase, epoch_loss, epoch_acc))

            # deep copy the model
            if phase == 'val' and epoch_acc > best_acc:
                best_acc = epoch_acc
                best_model_wts = copy.deepcopy(model.state_dict())
            if phase == 'val':
                val_acc_history.append(epoch_acc)

        print()

    time_elapsed = time.time() - since
    print('Training complete in {:.0f}m {:.0f}s'.format(time_elapsed // 60, time_elapsed % 60))
    print('Best val Acc: {:4f}'.format(best_acc))

    # load best model weights
    model.load_state_dict(best_model_wts)
    return model, val_acc_history

def test_model(dataloaders, model_file): 
  # Load the model
  model = torch.load(model_file)
  model.eval()

  corrects = 0

  for inputs, labels in dataloaders:
    inputs = inputs.to(device)
    labels = labels.to(device)

    if torch.cuda.is_available():
        model.to(device)

    # get the outputs
    with torch.no_grad():
        output = model(inputs)
    _, preds = torch.max(output, 1)

    corrects += torch.sum(preds == labels.data)

    acc = corrects.double() / len(dataloaders.dataset)
          
  print("The accuracy of the model is {:4f}".format(acc))

if __name__ == "__main__":
    # parse through the arguments
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("--dataset", "-d", type=str, default="seg_train")
    parser.add_argument("--datatest", "-t", type=str, default="seg_test")
    parser.add_argument("--batchsize", "-b", type=int, default=32)
    parser.add_argument("--nclasses", "-c", type=int, default=6)
    parser.add_argument("--nepochs", "-e", type=int, default=10)
    parser.add_argument("--split", "-s", type=float, default=0.9)
    parser.add_argument("--model", "-m", type=str, default='customized')
    parser.add_argument("--feature_extract", "-f", type=bool, default=True)
    parser.add_argument("--outputs", "-o", type=str, default="outputs")
    args = parser.parse_args()

    # Initialize the model for this run
    if args.model == 'customized':
      model_ft = ClassifierNet(args.nclasses)
      input_size = 224
    else:
      model_ft, input_size = initialize_model('resnet', args.nclasses, args.feature_extract, use_pretrained=True)

    # preprocess the images and transform them to tensors
    transform =   transforms.Compose([
    transforms.Resize((input_size, input_size)),
    transforms.RandomHorizontalFlip(),
    transforms.ToTensor(),
    transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ])

    # Splitting dataset
    # image_datasets = datasets.ImageFolder(args.dataset, transform)
    image_datasets = datasets.ImageFolder(args.dataset, transform)
    train_length = int(args.split*len(image_datasets))
    val_length = len(image_datasets) - train_length
    train, val = torch.utils.data.random_split(image_datasets, [train_length, val_length])

    dataloaders_train = torch.utils.data.DataLoader(train, batch_size=args.batchsize, shuffle=True, num_workers=4)
    dataloaders_val = torch.utils.data.DataLoader(val, batch_size=args.batchsize, shuffle=True, num_workers=4)

    test_dataset = datasets.ImageFolder(args.datatest, transform)
    dataloaders_test = torch.utils.data.DataLoader(test_dataset, batch_size=args.batchsize, shuffle=True, num_workers=4)

    # store the data as train and validation set
    dataloaders_dict = {'train':dataloaders_train, 'val':dataloaders_val}
    next(iter(dataloaders_train))

    # Get a batch of training data 
    inputs, classes = next(iter(dataloaders_train))

    # Make a grid from batch
    # out = torchvision.utils.make_grid(inputs)
    # imshow(out,title=[class_names[x.item()] for x in classes])

    # Send the model to GPU
    model_ft = model_ft.to(device)

    # Gather the parameters to be optimized/updated in this run. If we are
    #  finetuning we will be updating all parameters. However, if we are
    #  doing feature extract method, we will only update the parameters
    #  that we have just initialized, i.e. the parameters with requires_grad
    #  is True.
    params_to_update = model_ft.parameters()
    print("Params to learn:")
    if args.feature_extract:
        params_to_update = []
        for name,param in model_ft.named_parameters():
            if param.requires_grad == True:
                params_to_update.append(param)
                print("\t",name)
    else:
        for name,param in model_ft.named_parameters():
            if param.requires_grad == True:
                print("\t",name)

    # Observe that all parameters are being optimized
    optimizer_ft = optim.SGD(params_to_update, lr=0.1, momentum=0.9)
    # Setup the loss fxn
    criterion = nn.CrossEntropyLoss()

    # Train and evaluate state-of-the-art model
    model_ft, hist = train_model(model_ft, dataloaders_dict, criterion, optimizer_ft, num_epochs=args.nepochs, is_inception=(args.model=='inception'))

    # Save
    os.makedirs(args.outputs, exist_ok=True)
    modelpath = os.path.join(args.outputs, "model.pth")
    torch.save(model_ft, modelpath)
    print("State of the art Model saved to", modelpath)

    # test the model
    test_model(dataloaders_test, modelpath)



